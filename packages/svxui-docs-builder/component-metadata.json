[
  {
    "name": "accordion",
    "components": [
      {
        "name": "AccordionRoot",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/accordion/components/accordion-root.svelte",
        "extendeds": [],
        "props": [
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "aliasType": "AccordionRootSnippetProps",
            "jsDoc": [
              {
                "text": "/**\n     * Accordion Root content to render\n     */",
                "commentText": "Accordion Root content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[AccordionRootSnippetProps]>"
          },
          {
            "name": "disabled",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Disable all Accordion Item\n     */",
                "commentText": "Disable all Accordion Item",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "loop",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Loop when navigating with the keyboard\n     */",
                "commentText": "Loop when navigating with the keyboard",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "multiple",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Can toggle single or multiple Accordion Item\n     */",
                "commentText": "Can toggle single or multiple Accordion Item",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "onValueChange",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Callback when value change\n     */",
                "commentText": "Callback when value change",
                "tags": []
              }
            ],
            "type": "AccordionSelectionValueChange"
          },
          {
            "name": "orientation",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Accordion orientation\n     */",
                "commentText": "Accordion orientation",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "horizontal",
              "vertical"
            ],
            "defaultValue": "vertical"
          },
          {
            "name": "value",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "aliasType": "string[] | number[] | string | number | null | undefined",
            "jsDoc": [
              {
                "text": "/**\n     * Current accordion selection. Single value when multiple is false and Array is multiple is true,\n     */",
                "commentText": "Current accordion selection. Single value when multiple is false and Array is multiple is true,",
                "tags": []
              }
            ],
            "type": "AccordionSelectionValue"
          }
        ],
        "exports": [],
        "jsDoc": []
      },
      {
        "name": "AccordionItem",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/accordion/components/accordion-item.svelte",
        "extendeds": [],
        "props": [
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "aliasType": "AccordionItemSnippetProps",
            "jsDoc": [
              {
                "text": "/**\n     * Accordion Item content to render\n     */",
                "commentText": "Accordion Item content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[AccordionItemSnippetProps]>"
          },
          {
            "name": "disabled",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Disable Accordion Item\n     */",
                "commentText": "Disable Accordion Item",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "headingLevel",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Heading level for aria-level attribut\n     */",
                "commentText": "Heading level for aria-level attribut",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6"
            ],
            "defaultValue": 2
          },
          {
            "name": "value",
            "isOptional": false,
            "isBindable": false,
            "isSnippet": false,
            "aliasType": "string | number | null | undefined",
            "jsDoc": [
              {
                "text": "/**\n     * Unique Accordion Item identifier\n     */",
                "commentText": "Unique Accordion Item identifier",
                "tags": []
              }
            ],
            "type": "AccordionValue"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [
      {
        "name": "AccordionItemSnippetProps",
        "text": "export type AccordionItemSnippetProps = {\n    readonly expanded: boolean;\n    readonly disabled: boolean;\n    readonly itemAttrs: Record<string, unknown>;\n    readonly headingAttrs: Record<string, unknown>;\n    readonly triggerAttrs: Record<string, unknown>;\n    readonly contentAttrs: Record<string, unknown>;\n};",
        "kind": "TypeLiteral"
      },
      {
        "name": "AccordionRootSnippetProps",
        "text": "export type AccordionRootSnippetProps = {\n    readonly rootAttrs: Record<string, unknown>;\n};",
        "kind": "TypeLiteral"
      },
      {
        "name": "AccordionSelectionValueChange",
        "text": "export type AccordionSelectionValueChange = (newValue: AccordionSelectionValue) => void;",
        "kind": "FunctionType"
      }
    ],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AF00DB;--shiki-dark:#C586C0\">export</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\"> type</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> AccordionSelectionValueChange</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> = (</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\">newValue</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">AccordionSelectionValue</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">) </span><span style=\"color:#0000FF;--shiki-dark:#569CD6\">=></span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> void</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AF00DB;--shiki-dark:#C586C0\">export</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\"> type</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> AccordionRootSnippetProps</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> = {</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> rootAttrs</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">Record</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">&#x3C;</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">, </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">unknown</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">>;</span></span>\n<span class=\"line\"><span style=\"color:#000000;--shiki-dark:#D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AF00DB;--shiki-dark:#C586C0\">export</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\"> type</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> AccordionItemSnippetProps</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> = {</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> expanded</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">boolean</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> disabled</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">boolean</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> itemAttrs</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">Record</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">&#x3C;</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">, </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">unknown</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">>;</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> headingAttrs</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">Record</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">&#x3C;</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">, </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">unknown</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">>;</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> triggerAttrs</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">Record</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">&#x3C;</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">, </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">unknown</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">>;</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> contentAttrs</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">Record</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">&#x3C;</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">, </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">unknown</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">>;</span></span>\n<span class=\"line\"><span style=\"color:#000000;--shiki-dark:#D4D4D4\">};</span></span></code></pre>"
  },
  {
    "name": "badge",
    "components": [
      {
        "name": "Badge",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/badge/components/badge.svelte",
        "extendeds": [
          {
            "type": "HTMLAttributes<HTMLSpanElement>",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "jsDoc": [
              {
                "text": "/**\n     * Badge content to render\n     */",
                "commentText": "Badge content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[void]>"
          },
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Color of badge\n     */",
                "commentText": "Color of badge",
                "tags": []
              }
            ],
            "type": "string | number | symbol",
            "defaultValue": "neutral"
          },
          {
            "name": "disabled",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Disable badge\n     */",
                "commentText": "Disable badge",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLSpanElement"
          },
          {
            "name": "radius",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Radius of badge\n     */",
                "commentText": "Radius of badge",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "none",
              "small",
              "medium",
              "large",
              "full"
            ]
          },
          {
            "name": "size",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Size of badge\n     */",
                "commentText": "Size of badge",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "1",
              "2",
              "3"
            ],
            "defaultValue": "1"
          },
          {
            "name": "variant",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Variant of badge\n     */",
                "commentText": "Variant of badge",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "solid",
              "soft",
              "outline"
            ],
            "defaultValue": "solid"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "button",
    "components": [
      {
        "name": "Button",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/button/components/button.svelte",
        "extendeds": [
          {
            "type": "HTMLButtonAttributes",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "active",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Button active state\n     */",
                "commentText": "Button active state",
                "tags": []
              }
            ],
            "type": "boolean"
          },
          {
            "name": "align",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Text Align\n     */",
                "commentText": "Text Align",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "start",
              "center",
              "end"
            ],
            "defaultValue": "center"
          },
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "jsDoc": [
              {
                "text": "/**\n     * Button content to render\n     */",
                "commentText": "Button content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[void]>"
          },
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Button color\n     */",
                "commentText": "Button color",
                "tags": []
              }
            ],
            "type": "string | number | symbol",
            "defaultValue": "neutral"
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLButtonElement"
          },
          {
            "name": "fullWidth",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Button full width\n     */",
                "commentText": "Button full width",
                "tags": []
              }
            ],
            "type": "boolean"
          },
          {
            "name": "iconOnly",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Button icon only\n     */",
                "commentText": "Button icon only",
                "tags": []
              }
            ],
            "type": "boolean"
          },
          {
            "name": "radius",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Button radius\n     */",
                "commentText": "Button radius",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "none",
              "small",
              "medium",
              "large",
              "full"
            ]
          },
          {
            "name": "size",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Button size\n     */",
                "commentText": "Button size",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "1",
              "2",
              "3",
              "4"
            ],
            "defaultValue": "2"
          },
          {
            "name": "transform",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Text transform\n     */",
                "commentText": "Text transform",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "lowercase",
              "uppercase",
              "capitalize"
            ]
          },
          {
            "name": "variant",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Button variant\n     */",
                "commentText": "Button variant",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "solid",
              "soft",
              "outline",
              "clear"
            ],
            "defaultValue": "solid"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "checkbox",
    "components": [
      {
        "name": "Checkbox",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/checkbox/components/checkbox.svelte",
        "extendeds": [
          {
            "type": "Omit<HTMLInputAttributes, \"size\" | \"color\" | \"type\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Checkbox color\n     */",
                "commentText": "Checkbox color",
                "tags": []
              }
            ],
            "type": "string | number | symbol",
            "defaultValue": "neutral"
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLInputElement"
          },
          {
            "name": "radius",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Checkbox radius\n     */",
                "commentText": "Checkbox radius",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "none",
              "small",
              "medium",
              "large",
              "full"
            ]
          },
          {
            "name": "size",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Checkbox size\n     */",
                "commentText": "Checkbox size",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "1",
              "2",
              "3"
            ],
            "defaultValue": "2"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "dialog",
    "components": [
      {
        "name": "Dialog",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/dialog/components/dialog.svelte",
        "extendeds": [
          {
            "type": "Omit<HTMLAttributes<HTMLDivElement>, \"color\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "jsDoc": [
              {
                "text": "/**\n     * Dialog content to render\n     */",
                "commentText": "Dialog content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[void]>"
          },
          {
            "name": "closeOnBackdropClick",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Close dialog on backdrop click\n     */",
                "commentText": "Close dialog on backdrop click",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": true
          },
          {
            "name": "closeOnEscape",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Close dialog on escape key\n     */",
                "commentText": "Close dialog on escape key",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": true
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLDivElement"
          },
          {
            "name": "fullScreen",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Open as fullscreen dialog\n     */",
                "commentText": "Open as fullscreen dialog",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "height",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * CSS height of dialog\n     */",
                "commentText": "CSS height of dialog",
                "tags": []
              }
            ],
            "type": "string"
          },
          {
            "name": "isOpen",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Manage/listen open state\n     */",
                "commentText": "Manage/listen open state",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "lockScroll",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Lock body scroll when open\n     */",
                "commentText": "Lock body scroll when open",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "maxHeight",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * CSS max-height of dialog\n     */",
                "commentText": "CSS max-height of dialog",
                "tags": []
              }
            ],
            "type": "string"
          },
          {
            "name": "maxWidth",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * CSS max-width of dialog\n     */",
                "commentText": "CSS max-width of dialog",
                "tags": []
              }
            ],
            "type": "string"
          },
          {
            "name": "minHeight",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * CSS min-height of dialog\n     */",
                "commentText": "CSS min-height of dialog",
                "tags": []
              }
            ],
            "type": "string"
          },
          {
            "name": "minWidth",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * CSS min-width of dialog\n     */",
                "commentText": "CSS min-width of dialog",
                "tags": []
              }
            ],
            "type": "string"
          },
          {
            "name": "noPadding",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Disable dialog padding\n     */",
                "commentText": "Disable dialog padding",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "onClose",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Callback when dialog is closed\n     */",
                "commentText": "Callback when dialog is closed",
                "tags": []
              }
            ],
            "type": "() => void"
          },
          {
            "name": "radius",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Dialog border radius\n     */",
                "commentText": "Dialog border radius",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "none",
              "small",
              "medium",
              "large",
              "full"
            ]
          },
          {
            "name": "size",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Dialog size\n     */",
                "commentText": "Dialog size",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "1",
              "2",
              "3",
              "4"
            ],
            "defaultValue": "3"
          },
          {
            "name": "transitionDelay",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Transition delay of open/close animation\n     */",
                "commentText": "Transition delay of open/close animation",
                "tags": []
              }
            ],
            "type": "number",
            "defaultValue": 0
          },
          {
            "name": "transitionDuration",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Transition duration of open/close animation\n     */",
                "commentText": "Transition duration of open/close animation",
                "tags": []
              }
            ],
            "type": "number",
            "defaultValue": 150
          },
          {
            "name": "width",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * CSS width of dialog\n     */",
                "commentText": "CSS width of dialog",
                "tags": []
              }
            ],
            "type": "string"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "flexbox",
    "components": [
      {
        "name": "Flexbox",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/flexbox/components/flexbox.svelte",
        "extendeds": [
          {
            "type": "Omit<HTMLAttributes<HTMLDivElement>, \"color\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "align",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Align items\n     */",
                "commentText": "Align items",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "start",
              "center",
              "end",
              "baseline",
              "stretch",
              "normal"
            ]
          },
          {
            "name": "as",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Render element as\n     */",
                "commentText": "Render element as",
                "tags": []
              }
            ],
            "type": "keyof SvelteHTMLElements",
            "defaultValue": "div"
          },
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "jsDoc": [
              {
                "text": "/**\n     * Flexbox content to render\n     */",
                "commentText": "Flexbox content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[void]>"
          },
          {
            "name": "direction",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Flex direction\n     */",
                "commentText": "Flex direction",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "row",
              "column",
              "row-reverse",
              "column-reverse"
            ]
          },
          {
            "name": "display",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Flex display variant\n     */",
                "commentText": "Flex display variant",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "none",
              "inline-flex",
              "flex"
            ],
            "defaultValue": "flex"
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLElement"
          },
          {
            "name": "fullWidth",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Flexbox full width\n     */",
                "commentText": "Flexbox full width",
                "tags": []
              }
            ],
            "type": "boolean"
          },
          {
            "name": "gap",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Flex gap\n     */",
                "commentText": "Flex gap",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9"
            ]
          },
          {
            "name": "justify",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Justify content\n     */",
                "commentText": "Justify content",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "start",
              "center",
              "end",
              "around",
              "between",
              "evenly",
              "baseline",
              "stretch",
              "normal"
            ],
            "defaultValue": "start"
          },
          {
            "name": "wrap",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Flex wrap\n     */",
                "commentText": "Flex wrap",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "nowrap",
              "wrap",
              "wrap-reverse"
            ]
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "floating",
    "components": [
      {
        "name": "Floating",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/floating/components/floating.svelte",
        "extendeds": [
          {
            "type": "Omit<HTMLAttributes<HTMLDivElement>, \"color\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "arrow",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Show arrow\n     */",
                "commentText": "Show arrow",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "autoUpdate",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Updateposition on scroll\n     */",
                "commentText": "Updateposition on scroll",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "backdrop",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Show backdrop\n     */",
                "commentText": "Show backdrop",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "closeOnClickBackdrop",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Close floating on backdrop click. Only if backdrop is true\n     */",
                "commentText": "Close floating on backdrop click. Only if backdrop is true",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "closeOnClickOutside",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Close floating on outside click\n     */",
                "commentText": "Close floating on outside click",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "closeOnEscape",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Close floating on escape key\n     */",
                "commentText": "Close floating on escape key",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "closeOnResize",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Close floating on resize\n     */",
                "commentText": "Close floating on resize",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "closeOnScroll",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Close floating on scroll\n     */",
                "commentText": "Close floating on scroll",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Floating color\n     */",
                "commentText": "Floating color",
                "tags": []
              }
            ],
            "type": "string | number | symbol",
            "defaultValue": "neutral"
          },
          {
            "name": "content",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "jsDoc": [
              {
                "text": "/**\n     * Floating content to render\n     */",
                "commentText": "Floating content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[void]>"
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLDivElement"
          },
          {
            "name": "flip",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Use flip floating middleware\n     */",
                "commentText": "Use flip floating middleware",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "hide",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Use hide floating middleware\n     */",
                "commentText": "Use hide floating middleware",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "isOpen",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Manage/listen open state\n     */",
                "commentText": "Manage/listen open state",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "offset",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Floating offset from target\n     */",
                "commentText": "Floating offset from target",
                "tags": []
              }
            ],
            "type": "number",
            "defaultValue": 0
          },
          {
            "name": "onClose",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Callback when floating is closed\n     */",
                "commentText": "Callback when floating is closed",
                "tags": []
              }
            ],
            "type": "() => void"
          },
          {
            "name": "placement",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Prefered placement\n     */",
                "commentText": "Prefered placement",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "top",
              "right",
              "bottom",
              "left",
              "top-start",
              "top-end",
              "right-start",
              "right-end",
              "bottom-start",
              "bottom-end",
              "left-start",
              "left-end"
            ],
            "defaultValue": "top"
          },
          {
            "name": "portal",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Enable portal rendering\n     */",
                "commentText": "Enable portal rendering",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "portalTarget",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Portal target identifier. Only if portal is true\n     */",
                "commentText": "Portal target identifier. Only if portal is true",
                "tags": []
              }
            ],
            "type": "string",
            "defaultValue": ".svxui[data-theme-root]"
          },
          {
            "name": "radius",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Floating radius\n     */",
                "commentText": "Floating radius",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "none",
              "small",
              "medium",
              "large",
              "full"
            ]
          },
          {
            "name": "shift",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Use shift floating middleware\n     */",
                "commentText": "Use shift floating middleware",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "size",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Floating size\n     */",
                "commentText": "Floating size",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5"
            ],
            "defaultValue": "3"
          },
          {
            "name": "transitionDelay",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Transition delay of open/close animation\n     */",
                "commentText": "Transition delay of open/close animation",
                "tags": []
              }
            ],
            "type": "number",
            "defaultValue": 0
          },
          {
            "name": "transitionDuration",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Transition duration of open/close animation\n     */",
                "commentText": "Transition duration of open/close animation",
                "tags": []
              }
            ],
            "type": "number",
            "defaultValue": 150
          },
          {
            "name": "trigger",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "jsDoc": [
              {
                "text": "/**\n     * Floating trigger content to render\n     */",
                "commentText": "Floating trigger content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[void]>"
          },
          {
            "name": "variant",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Floating variant\n     */",
                "commentText": "Floating variant",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "solid",
              "soft",
              "outline"
            ],
            "defaultValue": "solid"
          }
        ],
        "exports": [],
        "jsDoc": []
      },
      {
        "name": "FloatingArrow",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/floating/components/floating-arrow.svelte",
        "extendeds": [
          {
            "type": "Omit<SVGAttributes<SVGElement>, \"color\" | \"width\" | \"height\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * FloatingArrow color\n     */",
                "commentText": "FloatingArrow color",
                "tags": []
              }
            ],
            "type": "string | number | symbol",
            "defaultValue": "neutral"
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLElement | SVGElement"
          },
          {
            "name": "floatingState",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Floating positioning state\n     */",
                "commentText": "Floating positioning state",
                "tags": []
              }
            ],
            "type": "FloatingState"
          },
          {
            "name": "height",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * FloatingArrow height\n     */",
                "commentText": "FloatingArrow height",
                "tags": []
              }
            ],
            "type": "number"
          },
          {
            "name": "tipRadius",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * FloatingArrow tip radius\n     */",
                "commentText": "FloatingArrow tip radius",
                "tags": []
              }
            ],
            "type": "number"
          },
          {
            "name": "variant",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * FloatingArrow variant\n     */",
                "commentText": "FloatingArrow variant",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "solid",
              "soft",
              "outline"
            ],
            "defaultValue": "soft"
          },
          {
            "name": "width",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * FloatingArrow width\n     */",
                "commentText": "FloatingArrow width",
                "tags": []
              }
            ],
            "type": "number"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "input",
    "components": [
      {
        "name": "Input",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/input/components/input.svelte",
        "extendeds": [
          {
            "type": "Omit<HTMLInputAttributes, \"size\" | \"color\" | \"type\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "align",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Text align\n     */",
                "commentText": "Text align",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "start",
              "center",
              "end"
            ],
            "defaultValue": "start"
          },
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Input color\n     */",
                "commentText": "Input color",
                "tags": []
              }
            ],
            "type": "string | number | symbol",
            "defaultValue": "neutral"
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLInputElement"
          },
          {
            "name": "fullWidth",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Input full width\n     */",
                "commentText": "Input full width",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "inputSize",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Native html input size\n     */",
                "commentText": "Native html input size",
                "tags": []
              }
            ],
            "type": "number"
          },
          {
            "name": "radius",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Input color\n     */",
                "commentText": "Input color",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "none",
              "small",
              "medium",
              "large",
              "full"
            ]
          },
          {
            "name": "size",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Input color\n     */",
                "commentText": "Input color",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "1",
              "2",
              "3"
            ],
            "defaultValue": "2"
          },
          {
            "name": "type",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Allowed input type\n     */",
                "commentText": "Allowed input type",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "number",
              "text",
              "search",
              "password",
              "email",
              "tel",
              "url",
              "date",
              "time",
              "datetime-local",
              "month",
              "week"
            ],
            "defaultValue": "text"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "input-group",
    "components": [
      {
        "name": "InputGroupItem",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/input-group/components/input-group-item.svelte",
        "extendeds": [
          {
            "type": "Omit<HTMLAttributes<HTMLDivElement>, \"color\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "jsDoc": [
              {
                "text": "/**\n     * InputGroupItem content to render\n     */",
                "commentText": "InputGroupItem content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[void]>"
          },
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * InputGroupItem color\n     */",
                "commentText": "InputGroupItem color",
                "tags": []
              }
            ],
            "type": "string | number | symbol",
            "defaultValue": "neutral"
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLDivElement"
          }
        ],
        "exports": [],
        "jsDoc": []
      },
      {
        "name": "InputGroup",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/input-group/components/input-group.svelte",
        "extendeds": [
          {
            "type": "Omit<HTMLAttributes<HTMLDivElement>, \"color\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "jsDoc": [
              {
                "text": "/**\n     * InputGroup content to render\n     */",
                "commentText": "InputGroup content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[void]>"
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLDivElement"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "input-number",
    "components": [
      {
        "name": "InputNumber",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/input-number/components/input-number.svelte",
        "extendeds": [
          {
            "type": "Omit<InputGroupProps, \"color\" | \"children\" | \"elementRef\">",
            "isSvelteElement": false
          }
        ],
        "props": [
          {
            "name": "align",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Text align\n     */",
                "commentText": "Text align",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "start",
              "center",
              "end"
            ],
            "defaultValue": "end"
          },
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * InputNumber color\n     */",
                "commentText": "InputNumber color",
                "tags": []
              }
            ],
            "type": "string | number | symbol",
            "defaultValue": "neutral"
          },
          {
            "name": "disabled",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Disabled state\n     */",
                "commentText": "Disabled state",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLInputElement"
          },
          {
            "name": "fullWidth",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * InputNumber full width\n     */",
                "commentText": "InputNumber full width",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "max",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Max value\n     */",
                "commentText": "Max value",
                "tags": []
              }
            ],
            "type": "number | null"
          },
          {
            "name": "min",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Min value\n     */",
                "commentText": "Min value",
                "tags": []
              }
            ],
            "type": "number | null"
          },
          {
            "name": "radius",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * InputNumberradius\n     */",
                "commentText": "InputNumberradius",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "none",
              "small",
              "medium",
              "large",
              "full"
            ]
          },
          {
            "name": "readonly",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * readonly\n     */",
                "commentText": "readonly",
                "tags": []
              }
            ],
            "type": "boolean"
          },
          {
            "name": "required",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Required state\n     */",
                "commentText": "Required state",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "size",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * InputNumbersize\n     */",
                "commentText": "InputNumbersize",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "1",
              "2",
              "3"
            ],
            "defaultValue": "2"
          },
          {
            "name": "step",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Increment step\n     */",
                "commentText": "Increment step",
                "tags": []
              }
            ],
            "type": "number | null",
            "defaultValue": 1
          },
          {
            "name": "value",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Input value\n     */",
                "commentText": "Input value",
                "tags": []
              }
            ],
            "type": "number | null"
          },
          {
            "name": "variant",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * InputNumber variant\n     */",
                "commentText": "InputNumber variant",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "solid",
              "soft",
              "outline",
              "clear"
            ],
            "defaultValue": "clear"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "input-range",
    "components": [
      {
        "name": "InputRange",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/input-range/components/input-range.svelte",
        "extendeds": [
          {
            "type": "Omit<HTMLInputAttributes, \"size\" | \"color\" | \"type\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * InputRange color\n     */",
                "commentText": "InputRange color",
                "tags": []
              }
            ],
            "type": "string | number | symbol",
            "defaultValue": "neutral"
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLInputElement"
          },
          {
            "name": "fullWidth",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * InputRange full width\n     */",
                "commentText": "InputRange full width",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "orientation",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * InputRange orientation\n     */",
                "commentText": "InputRange orientation",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "horizontal",
              "vertical"
            ],
            "defaultValue": "horizontal"
          },
          {
            "name": "radius",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * InputRange radius\n     */",
                "commentText": "InputRange radius",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "none",
              "small",
              "medium",
              "large",
              "full"
            ]
          },
          {
            "name": "size",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * InputRange size\n     */",
                "commentText": "InputRange size",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "1",
              "2",
              "3"
            ],
            "defaultValue": "2"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "link",
    "components": [
      {
        "name": "Link",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/link/components/link.svelte",
        "extendeds": [
          {
            "type": "Omit<HTMLAnchorAttributes, \"color\">",
            "isSvelteElement": true
          },
          {
            "type": "Omit<HTMLAttributes<HTMLElement>, \"color\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "align",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Text alignment\n     */",
                "commentText": "Text alignment",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "start",
              "center",
              "end"
            ],
            "defaultValue": "start"
          },
          {
            "name": "as",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Render element as\n     */",
                "commentText": "Render element as",
                "tags": []
              }
            ],
            "type": "keyof SvelteHTMLElements",
            "defaultValue": "div"
          },
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "jsDoc": [
              {
                "text": "/**\n     * Text content to render\n     */",
                "commentText": "Text content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[void]>"
          },
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Text color\n     */",
                "commentText": "Text color",
                "tags": []
              }
            ],
            "type": "string | number | symbol"
          },
          {
            "name": "disabled",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Disable text\n     */",
                "commentText": "Disable text",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLElement"
          },
          {
            "name": "muted",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Mute text (like disabled without aria-disabled)\n     */",
                "commentText": "Mute text (like disabled without aria-disabled)",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "size",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Font size\n     */",
                "commentText": "Font size",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9"
            ],
            "defaultValue": "3"
          },
          {
            "name": "transform",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Text transform\n     */",
                "commentText": "Text transform",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "lowercase",
              "uppercase",
              "capitalize"
            ]
          },
          {
            "name": "truncate",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Truncate text with ellipsis\n     */",
                "commentText": "Truncate text with ellipsis",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "underline",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Text decoration underline\n     */",
                "commentText": "Text decoration underline",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "auto",
              "always",
              "hover",
              "none"
            ],
            "defaultValue": "auto"
          },
          {
            "name": "weight",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Font weight\n     */",
                "commentText": "Font weight",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "light",
              "regular",
              "medium",
              "bold"
            ],
            "defaultValue": "regular"
          },
          {
            "name": "wrap",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Wrap text mode\n     */",
                "commentText": "Wrap text mode",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "wrap",
              "nowrap",
              "pretty",
              "balance"
            ]
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "panel",
    "components": [
      {
        "name": "Panel",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/panel/components/panel.svelte",
        "extendeds": [
          {
            "type": "Omit<HTMLAttributes<HTMLElement>, \"color\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "as",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Render element as\n     */",
                "commentText": "Render element as",
                "tags": []
              }
            ],
            "type": "keyof SvelteHTMLElements",
            "defaultValue": "div"
          },
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "jsDoc": [
              {
                "text": "/**\n     * Panel content to render\n     */",
                "commentText": "Panel content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[void]>"
          },
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Panel color\n     */",
                "commentText": "Panel color",
                "tags": []
              }
            ],
            "type": "string | number | symbol",
            "defaultValue": "neutral"
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLElement"
          },
          {
            "name": "fullWidth",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Panel full with\n     */",
                "commentText": "Panel full with",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "radius",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Panel radius\n     */",
                "commentText": "Panel radius",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "small",
              "none",
              "medium",
              "large",
              "full"
            ]
          },
          {
            "name": "size",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Panel size\n     */",
                "commentText": "Panel size",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9"
            ],
            "defaultValue": "3"
          },
          {
            "name": "variant",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Panel variant\n     */",
                "commentText": "Panel variant",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "solid",
              "soft",
              "outline"
            ],
            "defaultValue": "solid"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "portal",
    "components": [
      {
        "name": "Portal",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/portal/components/portal.svelte",
        "extendeds": [],
        "props": [
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "jsDoc": [
              {
                "text": "/**\n     * Portal content to render\n     */",
                "commentText": "Portal content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[void]>"
          },
          {
            "name": "disabled",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Disable portal\n     */",
                "commentText": "Disable portal",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "target",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Target identifier or any HTMLElement\n     */",
                "commentText": "Target identifier or any HTMLElement",
                "tags": []
              }
            ],
            "type": "string | HTMLElement",
            "defaultValue": "body"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "radio",
    "components": [
      {
        "name": "Radio",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/radio/components/radio.svelte",
        "extendeds": [
          {
            "type": "Omit<HTMLInputAttributes, \"size\" | \"color\" | \"type\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Radio color\n     */",
                "commentText": "Radio color",
                "tags": []
              }
            ],
            "type": "string | number | symbol",
            "defaultValue": "neutral"
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLInputElement"
          },
          {
            "name": "size",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Radio size\n     */",
                "commentText": "Radio size",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "1",
              "2",
              "3"
            ],
            "defaultValue": "2"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "select",
    "components": [
      {
        "name": "Select",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/select/components/select.svelte",
        "extendeds": [
          {
            "type": "Omit<HTMLSelectAttributes, \"size\" | \"color\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Select color\n     */",
                "commentText": "Select color",
                "tags": []
              }
            ],
            "type": "string | number | symbol",
            "defaultValue": "neutral"
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLSelectElement"
          },
          {
            "name": "fullWidth",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Select full size\n     */",
                "commentText": "Select full size",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "options",
            "isOptional": false,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Select options\n     */",
                "commentText": "Select options",
                "tags": []
              }
            ],
            "type": "SelectOption[] | string[] | number[]",
            "defaultValue": "[]"
          },
          {
            "name": "radius",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Select radius\n     */",
                "commentText": "Select radius",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "none",
              "small",
              "medium",
              "large",
              "full"
            ]
          },
          {
            "name": "resolveLabel",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Resolve label fron SelectOption object\n     */",
                "commentText": "Resolve label fron SelectOption object",
                "tags": []
              }
            ],
            "type": "SelectOptionResolver"
          },
          {
            "name": "resolveValue",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Resolve value of option\n     */",
                "commentText": "Resolve value of option",
                "tags": []
              }
            ],
            "type": "SelectOptionResolver"
          },
          {
            "name": "selectSize",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Native html size\n     */",
                "commentText": "Native html size",
                "tags": []
              }
            ],
            "type": "number | null",
            "defaultValue": 4
          },
          {
            "name": "size",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Select size\n     */",
                "commentText": "Select size",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "1",
              "2",
              "3"
            ],
            "defaultValue": "2"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [
      {
        "name": "SelectOption",
        "text": "export type SelectOption = {\n    label: string | number;\n    value: string | number;\n    disabled?: boolean | undefined;\n};",
        "kind": "TypeLiteral"
      },
      {
        "name": "SelectOptionResolver",
        "text": "export type SelectOptionResolver = <T>(item: T) => string | number;",
        "kind": "FunctionType"
      }
    ],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AF00DB;--shiki-dark:#C586C0\">export</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\"> type</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> SelectOption</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> = {</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    label</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> | </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">number</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    value</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> | </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">number</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    disabled</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">boolean</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> | </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">undefined</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#000000;--shiki-dark:#D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AF00DB;--shiki-dark:#C586C0\">export</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\"> type</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> SelectOptionResolver</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> = &#x3C;</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">T</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">>(</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\">item</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">T</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">) </span><span style=\"color:#0000FF;--shiki-dark:#569CD6\">=></span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> | </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">number</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span></code></pre>"
  },
  {
    "name": "separator",
    "components": [
      {
        "name": "Separator",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/separator/components/separator.svelte",
        "extendeds": [
          {
            "type": "Omit<HTMLAttributes<HTMLDivElement>, \"color\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Separator color\n     */",
                "commentText": "Separator color",
                "tags": []
              }
            ],
            "type": "string | number | symbol",
            "defaultValue": "neutral"
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLDivElement"
          },
          {
            "name": "orientation",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Separator orientation\n     */",
                "commentText": "Separator orientation",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "horizontal",
              "vertical"
            ],
            "defaultValue": "horizontal"
          },
          {
            "name": "size",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Separator size\n     */",
                "commentText": "Separator size",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "1",
              "2",
              "3",
              "4"
            ],
            "defaultValue": "2"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "switch",
    "components": [
      {
        "name": "Switch",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/switch/components/switch.svelte",
        "extendeds": [
          {
            "type": "Omit<HTMLInputAttributes, \"size\" | \"color\" | \"type\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Switch color\n     */",
                "commentText": "Switch color",
                "tags": []
              }
            ],
            "type": "string | number | symbol",
            "defaultValue": "neutral"
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLInputElement"
          },
          {
            "name": "radius",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Switch radius\n     */",
                "commentText": "Switch radius",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "none",
              "small",
              "medium",
              "large",
              "full"
            ]
          },
          {
            "name": "size",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Switch size\n     */",
                "commentText": "Switch size",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "1",
              "2",
              "3"
            ],
            "defaultValue": "2"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "tabs",
    "components": [
      {
        "name": "TabRoot",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/tabs/components/tab-root.svelte",
        "extendeds": [],
        "props": [
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "aliasType": "TabsRootSnippetProps",
            "jsDoc": [
              {
                "text": "/**\n     * Tab Root content to render\n     */",
                "commentText": "Tab Root content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[TabsRootSnippetProps]>"
          },
          {
            "name": "disabled",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Disable all tabs\n     */",
                "commentText": "Disable all tabs",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "loop",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Loop when navigating with the keyboard\n     */",
                "commentText": "Loop when navigating with the keyboard",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "onValueChange",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Callback when value change\n     */",
                "commentText": "Callback when value change",
                "tags": []
              }
            ],
            "type": "TabsSelectionValueChange"
          },
          {
            "name": "orientation",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Tabs orientation\n     */",
                "commentText": "Tabs orientation",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "horizontal",
              "vertical"
            ],
            "defaultValue": "horizontal"
          },
          {
            "name": "selectWhenFocused",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Activate tabs when focused\n     */",
                "commentText": "Activate tabs when focused",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": true
          },
          {
            "name": "value",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "aliasType": "TabsValue | null | undefined",
            "jsDoc": [
              {
                "text": "/**\n     * Current active tab value\n     */",
                "commentText": "Current active tab value",
                "tags": []
              }
            ],
            "type": "TabsSelectionValue"
          }
        ],
        "exports": [],
        "jsDoc": []
      },
      {
        "name": "TabList",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/tabs/components/tab-list.svelte",
        "extendeds": [],
        "props": [
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "aliasType": "TabsListSnippetProps",
            "jsDoc": [
              {
                "text": "/**\n     * Tab List content to render\n     */",
                "commentText": "Tab List content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[TabsListSnippetProps]>"
          }
        ],
        "exports": [],
        "jsDoc": []
      },
      {
        "name": "TabTrigger",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/tabs/components/tab-trigger.svelte",
        "extendeds": [],
        "props": [
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "aliasType": "TabsTriggerSnippetProps",
            "jsDoc": [
              {
                "text": "/**\n     * Tab trigger content to render\n     */",
                "commentText": "Tab trigger content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[TabsTriggerSnippetProps]>"
          },
          {
            "name": "disabled",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Disable tab\n     */",
                "commentText": "Disable tab",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "value",
            "isOptional": false,
            "isBindable": false,
            "isSnippet": false,
            "aliasType": "string | number",
            "jsDoc": [
              {
                "text": "/**\n     * Unique Tab identifier. Must be the same as TabContent value\n     */",
                "commentText": "Unique Tab identifier. Must be the same as TabContent value",
                "tags": []
              }
            ],
            "type": "TabsValue"
          }
        ],
        "exports": [],
        "jsDoc": []
      },
      {
        "name": "TabContent",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/tabs/components/tab-content.svelte",
        "extendeds": [],
        "props": [
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "aliasType": "TabsContentSnippetProps",
            "jsDoc": [
              {
                "text": "/**\n     * Tab content to render\n     */",
                "commentText": "Tab content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[TabsContentSnippetProps]>"
          },
          {
            "name": "value",
            "isOptional": false,
            "isBindable": false,
            "isSnippet": false,
            "aliasType": "string | number",
            "jsDoc": [
              {
                "text": "/**\n     * Unique Tab identifier. Must be the same as TabTrigger value\n     */",
                "commentText": "Unique Tab identifier. Must be the same as TabTrigger value",
                "tags": []
              }
            ],
            "type": "TabsValue"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [
      {
        "name": "TabsContentSnippetProps",
        "text": "export type TabsContentSnippetProps = {\n    readonly active: boolean;\n    readonly disabled: boolean;\n    readonly orientation: Orientation;\n    readonly attrs: Record<string, unknown>;\n};",
        "kind": "TypeLiteral"
      },
      {
        "name": "TabsListSnippetProps",
        "text": "export type TabsListSnippetProps = {\n    readonly orientation: Orientation;\n    readonly attrs: Record<string, unknown>;\n};",
        "kind": "TypeLiteral"
      },
      {
        "name": "TabsRootSnippetProps",
        "text": "export type TabsRootSnippetProps = {\n    readonly orientation: Orientation;\n    readonly attrs: Record<string, unknown>;\n};",
        "kind": "TypeLiteral"
      },
      {
        "name": "TabsSelectionValueChange",
        "text": "export type TabsSelectionValueChange = (value: TabsSelectionValue) => void;",
        "kind": "FunctionType"
      },
      {
        "name": "TabsTriggerSnippetProps",
        "text": "export type TabsTriggerSnippetProps = {\n    readonly active: boolean;\n    readonly disabled: boolean;\n    readonly orientation: Orientation;\n    readonly attrs: Record<string, unknown>;\n};",
        "kind": "TypeLiteral"
      }
    ],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AF00DB;--shiki-dark:#C586C0\">export</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\"> type</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> TabsSelectionValueChange</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> = (</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\">value</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">TabsSelectionValue</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">) </span><span style=\"color:#0000FF;--shiki-dark:#569CD6\">=></span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> void</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AF00DB;--shiki-dark:#C586C0\">export</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\"> type</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> TabsRootSnippetProps</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> = {</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> orientation</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">Orientation</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> attrs</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">Record</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">&#x3C;</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">, </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">unknown</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">>;</span></span>\n<span class=\"line\"><span style=\"color:#000000;--shiki-dark:#D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AF00DB;--shiki-dark:#C586C0\">export</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\"> type</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> TabsListSnippetProps</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> = {</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> orientation</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">Orientation</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> attrs</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">Record</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">&#x3C;</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">, </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">unknown</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">>;</span></span>\n<span class=\"line\"><span style=\"color:#000000;--shiki-dark:#D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AF00DB;--shiki-dark:#C586C0\">export</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\"> type</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> TabsTriggerSnippetProps</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> = {</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> active</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">boolean</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> disabled</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">boolean</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> orientation</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">Orientation</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> attrs</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">Record</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">&#x3C;</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">, </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">unknown</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">>;</span></span>\n<span class=\"line\"><span style=\"color:#000000;--shiki-dark:#D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AF00DB;--shiki-dark:#C586C0\">export</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\"> type</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> TabsContentSnippetProps</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> = {</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> active</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">boolean</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> disabled</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">boolean</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> orientation</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">Orientation</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#0000FF;--shiki-dark:#569CD6\">    readonly</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> attrs</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">Record</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">&#x3C;</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">, </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">unknown</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">>;</span></span>\n<span class=\"line\"><span style=\"color:#000000;--shiki-dark:#D4D4D4\">};</span></span></code></pre>"
  },
  {
    "name": "text",
    "components": [
      {
        "name": "Text",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/text/components/text.svelte",
        "extendeds": [
          {
            "type": "Omit<HTMLAnchorAttributes, \"color\">",
            "isSvelteElement": true
          },
          {
            "type": "Omit<HTMLAttributes<HTMLElement>, \"color\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "align",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Text alignment\n     */",
                "commentText": "Text alignment",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "start",
              "center",
              "end"
            ],
            "defaultValue": "start"
          },
          {
            "name": "as",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Render element as\n     */",
                "commentText": "Render element as",
                "tags": []
              }
            ],
            "type": "keyof SvelteHTMLElements",
            "defaultValue": "div"
          },
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "jsDoc": [
              {
                "text": "/**\n     * Text content to render\n     */",
                "commentText": "Text content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[void]>"
          },
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Text color\n     */",
                "commentText": "Text color",
                "tags": []
              }
            ],
            "type": "string | number | symbol"
          },
          {
            "name": "disabled",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Disable text\n     */",
                "commentText": "Disable text",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLElement"
          },
          {
            "name": "muted",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Mute text (like disabled without aria-disabled)\n     */",
                "commentText": "Mute text (like disabled without aria-disabled)",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "size",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Font size\n     */",
                "commentText": "Font size",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9"
            ],
            "defaultValue": "3"
          },
          {
            "name": "transform",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Text transform\n     */",
                "commentText": "Text transform",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "lowercase",
              "uppercase",
              "capitalize"
            ]
          },
          {
            "name": "truncate",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Truncate text with ellipsis\n     */",
                "commentText": "Truncate text with ellipsis",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "weight",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Font weight\n     */",
                "commentText": "Font weight",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "light",
              "regular",
              "medium",
              "bold"
            ],
            "defaultValue": "regular"
          },
          {
            "name": "wrap",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Wrap text mode\n     */",
                "commentText": "Wrap text mode",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "wrap",
              "nowrap",
              "pretty",
              "balance"
            ]
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "textarea",
    "components": [
      {
        "name": "Textarea",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/textarea/components/textarea.svelte",
        "extendeds": [
          {
            "type": "Omit<HTMLTextareaAttributes, \"color\">",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Textarea color\n     */",
                "commentText": "Textarea color",
                "tags": []
              }
            ],
            "type": "string | number | symbol",
            "defaultValue": "neutral"
          },
          {
            "name": "elementRef",
            "isOptional": true,
            "isBindable": true,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Rendered DOM element\n     */",
                "commentText": "Rendered DOM element",
                "tags": []
              }
            ],
            "type": "HTMLTextAreaElement"
          },
          {
            "name": "fullWidth",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Textarea full width\n     */",
                "commentText": "Textarea full width",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "radius",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Textarea radius\n     */",
                "commentText": "Textarea radius",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "none",
              "small",
              "medium",
              "large",
              "full"
            ]
          },
          {
            "name": "resizable",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Textarea resizable\n     */",
                "commentText": "Textarea resizable",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "size",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Textarea size\n     */",
                "commentText": "Textarea size",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "1",
              "2",
              "3"
            ],
            "defaultValue": "2"
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"
  },
  {
    "name": "theme",
    "components": [
      {
        "name": "ThemeRootProvider",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/theme/components/theme-root-provider.svelte",
        "extendeds": [
          {
            "type": "HTMLAttributes<HTMLDivElement>",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "jsDoc": [
              {
                "text": "/**\n     * ThemeRootProvider content to render\n     */",
                "commentText": "ThemeRootProvider content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[void]>"
          },
          {
            "name": "colorKey",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Storage key for accent color\n     */",
                "commentText": "Storage key for accent color",
                "tags": []
              }
            ],
            "type": "string"
          },
          {
            "name": "customThemeColors",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Custom theme colors\n     */",
                "commentText": "Custom theme colors",
                "tags": []
              }
            ],
            "type": "ThemeColorsType"
          },
          {
            "name": "defaultColor",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Default accent color\n     */",
                "commentText": "Default accent color",
                "tags": []
              }
            ],
            "type": "string",
            "defaultValue": "neutral"
          },
          {
            "name": "defaultRadius",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Default radius\n     */",
                "commentText": "Default radius",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "none",
              "small",
              "medium",
              "large",
              "full"
            ],
            "defaultValue": "medium"
          },
          {
            "name": "defaultStrategy",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Default theme strategy\n     */",
                "commentText": "Default theme strategy",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "system",
              "dark",
              "light"
            ],
            "defaultValue": "system"
          },
          {
            "name": "disableHeadScriptInjection",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Should disable init theme script injection. This script prevent FOUC.\n     */",
                "commentText": "Should disable init theme script injection. This script prevent FOUC.",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": false
          },
          {
            "name": "disableTransitions",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Should disable css transition when theme change\n     */",
                "commentText": "Should disable css transition when theme change",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": true
          },
          {
            "name": "hasBackground",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Should set the background color\n     */",
                "commentText": "Should set the background color",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": true
          },
          {
            "name": "metaThemeColors",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Content colors for meta theme-color tag\n     */",
                "commentText": "Content colors for meta theme-color tag",
                "tags": []
              }
            ],
            "type": "MetaThemeColorsType",
            "defaultValue": "{\"light\":\"#fcfcfc\",\"dark\":\"#111111\"}"
          },
          {
            "name": "radiusKey",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Storage key for radius\n     */",
                "commentText": "Storage key for radius",
                "tags": []
              }
            ],
            "type": "string"
          },
          {
            "name": "strategyKey",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Storage key for theme strategy\n     */",
                "commentText": "Storage key for theme strategy",
                "tags": []
              }
            ],
            "type": "string"
          },
          {
            "name": "track",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Should track storage change from other tab\n     */",
                "commentText": "Should track storage change from other tab",
                "tags": []
              }
            ],
            "type": "boolean",
            "defaultValue": true
          }
        ],
        "exports": [],
        "jsDoc": []
      },
      {
        "name": "ThemeChildProvider",
        "path": "/Users/amigamac/workspace/testapp/svelte/svxui/packages/svxui/dist/components/theme/components/theme-child-provider.svelte",
        "extendeds": [
          {
            "type": "HTMLAttributes<HTMLDivElement>",
            "isSvelteElement": true
          }
        ],
        "props": [
          {
            "name": "children",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": true,
            "jsDoc": [
              {
                "text": "/**\n     * ThemeChildProvider content to render\n     */",
                "commentText": "ThemeChildProvider content to render",
                "tags": []
              }
            ],
            "type": "Snippet<[void]>"
          },
          {
            "name": "color",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Static Accent color or resolved from ThemeRootProvider.\n     */",
                "commentText": "Static Accent color or resolved from ThemeRootProvider.",
                "tags": []
              }
            ],
            "type": "string"
          },
          {
            "name": "hasBackground",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Should set the background color\n     */",
                "commentText": "Should set the background color",
                "tags": []
              }
            ],
            "type": "boolean"
          },
          {
            "name": "radius",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Static radius or resolved from ThemeRootProvider.\n     */",
                "commentText": "Static radius or resolved from ThemeRootProvider.",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "none",
              "small",
              "medium",
              "large",
              "full"
            ]
          },
          {
            "name": "strategy",
            "isOptional": true,
            "isBindable": false,
            "isSnippet": false,
            "jsDoc": [
              {
                "text": "/**\n     * Static theme strategy or resolved from ThemeRootProvider.\n     */",
                "commentText": "Static theme strategy or resolved from ThemeRootProvider.",
                "tags": []
              }
            ],
            "type": "union",
            "values": [
              "system",
              "dark",
              "light"
            ]
          }
        ],
        "exports": [],
        "jsDoc": []
      }
    ],
    "sharedTypes": [
      {
        "name": "MetaThemeColorsType",
        "text": "export type MetaThemeColorsType = {\n    light: string;\n    dark: string;\n};",
        "kind": "TypeLiteral"
      },
      {
        "name": "StrategyType",
        "text": "export type StrategyType = (typeof Strategies)[number];",
        "kind": "IndexedAccessType"
      },
      {
        "name": "ThemeChildStateProps",
        "text": "export type ThemeChildStateProps = {\n    /**\n     * Static Accent color or resolved from ThemeRootProvider.\n     */\n    color?: string;\n    /**\n     * Static theme strategy or resolved from ThemeRootProvider.\n     */\n    strategy?: StrategyType;\n    /**\n     * Static radius or resolved from ThemeRootProvider.\n     */\n    radius?: Radius;\n    /**\n     * Should set the background color\n     */\n    hasBackground?: boolean;\n};",
        "kind": "TypeLiteral"
      },
      {
        "name": "ThemeColorsType",
        "text": "export type ThemeColorsType = Record<string, string>;",
        "kind": "TypeReference"
      },
      {
        "name": "ThemeRootStateProps",
        "text": "export type ThemeRootStateProps = {\n    /**\n     * Default accent color\n     */\n    defaultColor?: string;\n    /**\n     * Storage key for accent color\n     */\n    colorKey?: string;\n    /**\n     * Default theme strategy\n     */\n    defaultStrategy?: StrategyType;\n    /**\n     * Storage key for theme strategy\n     */\n    strategyKey?: string;\n    /**\n     * Default radius\n     */\n    defaultRadius?: Radius;\n    /**\n     * Storage key for radius\n     */\n    radiusKey?: string;\n    /**\n     * Content colors for meta theme-color tag\n     */\n    metaThemeColors?: MetaThemeColorsType;\n    /**\n     * Should set the background color\n     */\n    hasBackground?: boolean;\n    /**\n     * Should track storage change from other tab\n     */\n    track?: boolean;\n    /**\n     * Should disable css transition when theme change\n     */\n    disableTransitions?: boolean;\n    /**\n     * Should disable init theme script injection. This script prevent FOUC.\n     */\n    disableHeadScriptInjection?: boolean;\n    /**\n     * Custom theme colors\n     */\n    customThemeColors?: ThemeColorsType;\n};",
        "kind": "TypeLiteral"
      },
      {
        "name": "ThemeType",
        "text": "export type ThemeType = (typeof Themes)[number];",
        "kind": "IndexedAccessType"
      }
    ],
    "sharedTypesText": "<pre class=\"shiki shiki-themes light-plus dark-plus\" style=\"background-color:#FFFFFF;--shiki-dark-bg:#1E1E1E;color:#000000;--shiki-dark:#D4D4D4\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AF00DB;--shiki-dark:#C586C0\">export</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\"> type</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> StrategyType</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> = (</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\">typeof</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> Strategies</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">)[</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">number</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AF00DB;--shiki-dark:#C586C0\">export</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\"> type</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> ThemeType</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> = (</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\">typeof</span><span style=\"color:#001080;--shiki-dark:#9CDCFE\"> Themes</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">)[</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">number</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AF00DB;--shiki-dark:#C586C0\">export</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\"> type</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> MetaThemeColorsType</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> = {</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    light</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    dark</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#000000;--shiki-dark:#D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AF00DB;--shiki-dark:#C586C0\">export</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\"> type</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> ThemeColorsType</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> = </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">Record</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">&#x3C;</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">, </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">>;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AF00DB;--shiki-dark:#C586C0\">export</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\"> type</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> ThemeRootStateProps</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> = {</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">    /**</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     * Default accent color</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     */</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    defaultColor</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">    /**</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     * Storage key for accent color</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     */</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    colorKey</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">    /**</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     * Default theme strategy</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     */</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    defaultStrategy</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">StrategyType</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">    /**</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     * Storage key for theme strategy</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     */</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    strategyKey</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">    /**</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     * Default radius</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     */</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    defaultRadius</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">Radius</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">    /**</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     * Storage key for radius</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     */</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    radiusKey</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">    /**</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     * Content colors for meta theme-color tag</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     */</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    metaThemeColors</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">MetaThemeColorsType</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">    /**</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     * Should set the background color</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     */</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    hasBackground</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">boolean</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">    /**</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     * Should track storage change from other tab</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     */</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    track</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">boolean</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">    /**</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     * Should disable css transition when theme change</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     */</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    disableTransitions</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">boolean</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">    /**</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     * Should disable init theme script injection. This script prevent FOUC.</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     */</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    disableHeadScriptInjection</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">boolean</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">    /**</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     * Custom theme colors</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     */</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    customThemeColors</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">ThemeColorsType</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#000000;--shiki-dark:#D4D4D4\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AF00DB;--shiki-dark:#C586C0\">export</span><span style=\"color:#0000FF;--shiki-dark:#569CD6\"> type</span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\"> ThemeChildStateProps</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\"> = {</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">    /**</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     * Static Accent color or resolved from ThemeRootProvider.</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     */</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    color</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">string</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">    /**</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     * Static theme strategy or resolved from ThemeRootProvider.</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     */</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    strategy</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">StrategyType</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">    /**</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     * Static radius or resolved from ThemeRootProvider.</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     */</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    radius</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">Radius</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">    /**</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     * Should set the background color</span></span>\n<span class=\"line\"><span style=\"color:#008000;--shiki-dark:#6A9955\">     */</span></span>\n<span class=\"line\"><span style=\"color:#001080;--shiki-dark:#9CDCFE\">    hasBackground</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">?: </span><span style=\"color:#267F99;--shiki-dark:#4EC9B0\">boolean</span><span style=\"color:#000000;--shiki-dark:#D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color:#000000;--shiki-dark:#D4D4D4\">};</span></span></code></pre>"
  }
]